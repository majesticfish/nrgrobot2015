package org.usfirst.frc.team948.robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc.team948.robot.NRGCANTalon;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public enum Direction {
		Left, Right
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static Accelerometer accelerometer;
	
	public static SpeedController Victor_Left1;
	public static SpeedController Victor_Right1;
	public static SpeedController Victor_Right2;
	public static SpeedController Victor_Left2;
	public static Gyro Drive_Gyro;
	public static DoubleSolenoid gearShifter;
	public static Encoder RightEncoder;
	public static Encoder LeftEncoder;     

	public static NRGCANTalon LifterDart;
	public static AnalogPotentiometer scissorLiftPotentiometer;
	public static DigitalInput LowerLifterMovement;
	public static DigitalInput UpperLifterMovement;
	
	public static SpeedController TalonAcquirerRight;
	public static SpeedController TalonAcquirerLeft;
	public static DoubleSolenoid leftAcquirerPiston;
	public static DoubleSolenoid rightAcquirerPiston;
	public static DoubleSolenoid pushPiston;
	
	public static DigitalInput binSensor;
	public static DigitalInput firstToteSensor;
	public static DigitalInput nextToteSensor;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// TODO: Assign ports to the encoders based upon electrical's decision

	// public static Encoder encoderLeft;

	public static void init() {
		
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		Victor_Left1 = new Talon(2);
		LiveWindow.addActuator("Drive Subsystem",
				"Speed Controller Front Left Victor", (Talon) Victor_Left1);

		Victor_Right1 = new Talon(0);
		LiveWindow.addActuator("Drive Subsystem",
				"Speed Controller Front Right Victor", (Talon) Victor_Right1);

		Victor_Right2 = new Victor(1);
		LiveWindow.addActuator("Drive Subsystem",
				"Speed Controller Back Right Victor", (Victor) Victor_Right2);

		Victor_Left2 = new Victor(3);
		LiveWindow.addActuator("Drive Subsystem",
				"Speed Controller Back Left Victor", (Victor) Victor_Left2);
		gearShifter = new DoubleSolenoid(2, 3);

		Drive_Gyro = new Gyro(1);
		LiveWindow.addSensor("Drive Subsystem", "Drive Gyro", Drive_Gyro);
		if (Robot.contestRobot) {
			Drive_Gyro.setSensitivity(0.007 * 1070 / 1080);
		} else {

		}
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		RightEncoder = new Encoder(0, 1);
		if (Robot.contestRobot) {
			RightEncoder.setDistancePerPulse(10.125 / 16038);
		} else {
			RightEncoder.setDistancePerPulse(1 / 1639.5);
		}
		LiveWindow.addSensor("Drive Subsystem", "Right Side Encoder",
				(Encoder) RightEncoder);
		LeftEncoder = new Encoder(2, 3, true);
		if (Robot.contestRobot) {
			LeftEncoder.setDistancePerPulse(10.125 / 16405);
		} else {
			LeftEncoder.setDistancePerPulse(1 / 1639.5);
		}

		LeftEncoder.setReverseDirection(false);
		LiveWindow.addSensor("Drive Subsystem", "Left Side Encoder",
				(Encoder) LeftEncoder);

		LowerLifterMovement = new DigitalInput(4);
		UpperLifterMovement = new DigitalInput(5);
		
		binSensor = new DigitalInput(6);
		firstToteSensor = new DigitalInput(7);
		nextToteSensor = new DigitalInput(8);
		LiveWindow.addSensor("Acquirer", "Bin Sensor", binSensor);
		LiveWindow.addSensor("Acquirer", "1st Tote Sensor", firstToteSensor);
		LiveWindow.addSensor("Acquirer", "Next Tote Sensor", nextToteSensor);
		
		scissorLiftPotentiometer = new AnalogPotentiometer(2);
		LifterDart = new NRGCANTalon(1);
		LiveWindow.addSensor("Scissor Lift Subsystem",
				"Scissor Lift Potentiometer",
				(AnalogPotentiometer) scissorLiftPotentiometer);
		LiveWindow
				.addSensor("Scissor Lift Subsystem",
						"Scissor Lift Upper Switch",
						(DigitalInput) UpperLifterMovement);
		LiveWindow
				.addSensor("Scissor Lift Subsystem",
						"Scissor Lift Lower Switch",
						(DigitalInput) LowerLifterMovement);
		LifterDart.enableControl();
		LiveWindow.addActuator("Scissor Lift Subsystem", "LifterDart",
				LifterDart);

		TalonAcquirerLeft = new Victor(5);
		TalonAcquirerRight = new Victor(4);

		leftAcquirerPiston = new DoubleSolenoid(6, 7);
		rightAcquirerPiston = new DoubleSolenoid(4, 5);
		LiveWindow.addActuator("Pincher Subsytem", "Left Pincher Piston",
				leftAcquirerPiston);
		LiveWindow.addActuator("Pincher Subsystem", "Right Pincher Piston",
				rightAcquirerPiston);
		
		pushPiston = new DoubleSolenoid(0, 1);
		LiveWindow.addActuator("Acquirer Subsystem", "Push Piston",
				pushPiston);

	}
}