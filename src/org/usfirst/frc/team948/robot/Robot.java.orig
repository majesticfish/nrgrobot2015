
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



package org.usfirst.frc.team948.robot;
import org.usfirst.frc.team948.robot.commands.CommandBase;
import org.usfirst.frc.team948.robot.commands.DriveStraightDistance;
import org.usfirst.frc.team948.robot.commands.DriveToXY;
import org.usfirst.frc.team948.robot.commands.LiftToHeight;
import org.usfirst.frc.team948.robot.commands.PressurizePincher;
import org.usfirst.frc.team948.robot.commands.ResetSensors;
import org.usfirst.frc.team948.robot.commands.SealPincher;
import org.usfirst.frc.team948.robot.commands.TurnAngle;
import org.usfirst.frc.team948.robot.commands.autogroups.AutonomousThreeTotes;
import org.usfirst.frc.team948.robot.commands.autogroups.UpdatedAutonomousThreeTotes;
import org.usfirst.frc.team948.robot.commands.tests.DriveAndDeflectOnly;
import org.usfirst.frc.team948.robot.subsystems.ScissorLift;
import org.usfirst.frc.team948.robot.utilities.MathHelper;
import org.usfirst.frc.team948.robot.utilities.PositionTracker;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ShapeMode;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	public static boolean contestRobot = true;
	
	int session;
    //Image frame;
    Command pressurizePincher;
    //CameraServer server;
    //NIVision.Rect rect;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
	public void robotInit() {
    	RobotMap.init();
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
    	
    //	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);

        // the camera name (ex "cam0") can be found through the roborio web interface
      //  session = NIVision.IMAQdxOpenCamera("cam0",
      //          NIVision.IMAQdxCameraControlMode.CameraControlModeController);
      //  NIVision.IMAQdxConfigureGrab(session);
      //  NIVision.IMAQdxStartAcquisition(session);
      //  rect = new NIVision.Rect(10, 10, 100, 100);
	    DS2015.buttonInit();
	    SmartDashboard.putNumber("Number of totes", 3);
    	SmartDashboard.putBoolean("Bin at position 0", true);
    	SmartDashboard.putBoolean("Bin at position 1", true);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
	public void disabledInit(){
    }

    @Override
	public void disabledPeriodic() {
        Scheduler.getInstance().run();
        periodicAll();
    }

    @Override
	public void autonomousInit() {
    	CommandBase.pincher.pressurizePincher();
        // schedule the autonomous command
    	boolean[] bins = {SmartDashboard.getBoolean("Bin at position 0"), 
    					  SmartDashboard.getBoolean("Bin at position 1")
    					  };
    	
    	UpdatedAutonomousThreeTotes autonomous = new UpdatedAutonomousThreeTotes( 
    			(int) SmartDashboard.getNumber("Number of totes"), 
    			bins);
    	
    	autonomous.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
	public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        periodicAll();
    }

    @Override
	public void teleopInit() {
    	CommandBase.pincher.pressurizePincher();
    	SmartDashboard.putData("Power Turn Angle", new TurnAngle(90,0.65,1.5));
    	SmartDashboard.putData("Drive To XY", new DriveToXY(-5, 7, 0.8));
    	SmartDashboard.putData("Drive 3 feet fwd", new DriveStraightDistance(0, 0.9, 3));
    	SmartDashboard.putData("Drive 3 feet bwd", new DriveStraightDistance(0, -0.9, 3));
    	SmartDashboard.putData("Seal Pincher", new SealPincher());
    	SmartDashboard.putData("Test Turn", new TurnAngle(CommandBase.preferences.getDouble("TestTurnAngle", 80), CommandBase.preferences.getDouble("TestTurnSpeed", 0.7), CommandBase.preferences.getDouble("TestTurnTolerance", 5)));
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
	public void teleopPeriodic() {
        Scheduler.getInstance().run();
        periodicAll();
    }

    /**
     * This function is called periodically during test mode
     */
    @Override
	public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void periodicAll(){
    	CommandBase.positionTracker.update();
    	
    	double x = CommandBase.positionTracker.getX();
    	double y = CommandBase.positionTracker.getY();
    	
    	// double x2 = CommandBase.positionTracker.getX2();
    	// double y2 = CommandBase.positionTracker.getY2();
    	
    	SmartDashboard.putNumber("x", MathHelper.roundTo(3, x));
    	SmartDashboard.putNumber("y", MathHelper.roundTo(3, y));
    	SmartDashboard.putNumber("Left Encoder Distance", MathHelper.roundTo(3, RobotMap.leftEncoder.getDistance()));
    	SmartDashboard.putNumber("Rigt Encoder Distance", MathHelper.roundTo(3, RobotMap.rightEncoder.getDistance()));
    	PIDController drivePid = CommandBase.drive.getPIDController();
    	SmartDashboard.putNumber("Drive PID Error", MathHelper.roundTo(3, drivePid.getError()));
    	SmartDashboard.putNumber("Drive PID Output", MathHelper.roundTo(3, CommandBase.drive.getPidOutput()));
    	SmartDashboard.putNumber("Pot Value", MathHelper.roundTo(3, RobotMap.scissorLiftPotentiometer.get()));
    	SmartDashboard.putBoolean("Upper Limit", RobotMap.upperLifterMovement.get());
    	SmartDashboard.putBoolean("Lower Limit", RobotMap.lowerLifterMovement.get());
    	SmartDashboard.putBoolean("Back Button", RobotMap.nextToteSensor.get());
    	SmartDashboard.putNumber("Gyro", MathHelper.roundTo(3, RobotMap.driveGyro.getAngle()));
    	SmartDashboard.putNumber("Desired Heading", MathHelper.roundTo(3, CommandBase.drive.getDesiredHeading()));
    	SmartDashboard.putNumber("Back IR Value", RobotMap.backIR.getVoltage());   
    	SmartDashboard.putNumber("Lift Setpoint", MathHelper.roundTo(3, CommandBase.scissorLift.getPIDController().getSetpoint()));
    	SmartDashboard.putNumber("Lift error", MathHelper.roundTo(3, CommandBase.scissorLift.getPIDController().getError()));
    //	NIVision.IMAQdxGrab(session, frame, 1);
       // NIVision.imaqDrawShapeOnImage(frame, frame, rect,
         //       DrawMode.DRAW_VALUE, ShapeMode.SHAPE_OVAL, 0.0f);
        
       // CameraServer.getInstance().setImage(frame);
        DS2015.leonardo.setOutput(4,false);
        
        DS2015.leftJoystick.setOutput(4, false);
        if(Math.abs(RobotMap.scissorLiftPotentiometer.get() - ScissorLift.Level.Step.voltage) < 0.3 && 
        		(CommandBase.ds.getXboxRT() != 0 || CommandBase.ds.getXboxLT() != 0)){
        	DS2015.xboxController.setRumble(Joystick.RumbleType.kLeftRumble, 1);
        }else
        	DS2015.xboxController.setRumble(Joystick.RumbleType.kLeftRumble, 0);
    }
}
